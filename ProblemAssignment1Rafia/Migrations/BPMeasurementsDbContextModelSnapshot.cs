// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProblemAssignment1Rafia.Entities;

#nullable disable

namespace ProblemAssignment1Rafia.Migrations
{
    [DbContext(typeof(BPMeasurementsDbContext))]
    partial class BPMeasurementsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProblemAssignment1Rafia.Entities.BPMeasurement", b =>
                {
                    b.Property<int>("BPMeasurementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BPMeasurementId"));

                    b.Property<DateTime?>("DateofReading")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int>("DiastolicValue")
                        .HasColumnType("int");

                    b.Property<string>("PositionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SystolicValue")
                        .HasColumnType("int");

                    b.HasKey("BPMeasurementId");

                    b.HasIndex("PositionId");

                    b.ToTable("BPMeasurements");

                    b.HasData(
                        new
                        {
                            BPMeasurementId = 1,
                            DateofReading = new DateTime(2023, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiastolicValue = 121,
                            PositionId = "sd",
                            SystolicValue = 190
                        },
                        new
                        {
                            BPMeasurementId = 2,
                            DateofReading = new DateTime(2023, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiastolicValue = 91,
                            PositionId = "si",
                            SystolicValue = 142
                        },
                        new
                        {
                            BPMeasurementId = 3,
                            DateofReading = new DateTime(2023, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiastolicValue = 85,
                            PositionId = "ly",
                            SystolicValue = 131
                        },
                        new
                        {
                            BPMeasurementId = 4,
                            DateofReading = new DateTime(2023, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiastolicValue = 79,
                            PositionId = "si",
                            SystolicValue = 122
                        },
                        new
                        {
                            BPMeasurementId = 5,
                            DateofReading = new DateTime(2023, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiastolicValue = 121,
                            PositionId = "ly",
                            SystolicValue = 190
                        });
                });

            modelBuilder.Entity("ProblemAssignment1Rafia.Entities.Position", b =>
                {
                    b.Property<string>("PositionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PositionId");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            PositionId = "sd",
                            PositionName = "Standing"
                        },
                        new
                        {
                            PositionId = "si",
                            PositionName = "Sitting"
                        },
                        new
                        {
                            PositionId = "ly",
                            PositionName = "Lying Down"
                        });
                });

            modelBuilder.Entity("ProblemAssignment1Rafia.Entities.BPMeasurement", b =>
                {
                    b.HasOne("ProblemAssignment1Rafia.Entities.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");
                });
#pragma warning restore 612, 618
        }
    }
}
